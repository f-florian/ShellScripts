#!/bin/bash

version="1.0"
programName=`echo $0|rev|cut -d '/' -f1|rev`
options="nlyYcq"

printUsage() {
    echo "Usage: "
    echo "$programName [-h|-v]"

    echo "$programName [-$options] <id> [backup directory]"
    echo "$programName -n [-$options] [backup directory]"
    echo "Backup /home and / btrfs subvolumes to backup directory"
    echo "<backup directory> must be a btrfs filesystem.
Backup will be named <backup directory>/<id>[r|h]date, so that incremental backups are possible; this however only allows one backup per day: if this doesn't fit your needs edit the script.
<id> is a string used to distinguish backups of different system in the same directory"
    echo "Options:
-h: print this help and exit
-v: print version and exit
-n: noid, set an emty id 
-l: local, do not send subvolumes to a backup filesystem
-y: assume yes, continue without prompting if no errors occur
-Y: assume yes, never prompt
-q: quiet, don't print information about operations
-c: continue, do not abort after a non fatal error"
    echo "exit codes
0 success
1--64 mount failure (mount exit code)
65 invalid input
66 incorrect subvolumes
67 btrfs error
68 user cancelled action
69 error in send/receive
70 error in delete"
}

printVersion() {
    echo "$programName version $version (called as $0)."
    echo "This software is released into the public domain, see \"LICENSE\" for further details."
}

emitError() {
    errorFlag=true
    >&2 echo "Warning (error code $1): $2"
    if [ "$exitOnError" = "true" ]
    then exit $1
    fi
}

fatal() {
    exit $1
}

warnErrors() {
    if [ "$errorFlag" = "true" ]
    then
        echo -e "\033[0;31mWarning: there were errors\033[0m"
    else
        echo -e "\033[0;32mNo errors since now\033[0m"
    fi
}

askConfirmation() {
    if [ "$assumeYes" = "true" ]
    then return 0
    fi
    warnErrors
    if [[ ( "$errorFlag" = "true" ) || ( "$assumeyes" = "false" ) ]]
    then
        while [ -z "" ]
        do
            echo "continue? (y/n)"
            read reply
            if [ "$reply" = "y" ]
            then return 0
            elif [ "$reply" = "n" ]
            then return 1
            fi
        done
    fi
}

printMessage() {
    if [ "$verbose" = "true" ]
    then
        echo "$1"
    fi
}

forceid=true            # force nonempty id by default
local=false             # send to backup fs by default
exitOnError=true        # exit on error by default
verbose=true            # write information on operation by default
errorFlag=false         # no errors since now
assumeyes=false         # don't prompt unless there are errors
assumeYes=false         # don't prompt


while getopts $options currentOption
do
    case $currentOption in
	h) printUsage
	   exit 0;;
	v) printVersion
           exit 0;;
        n) forceid=false;;
        l) local=true;;
        c) exitOnError=false;;
        y) assumeyes=true;;
        Y) assumeYes=true;;
        q) verbose=false;;
        *) printWarning "Unrecognised option, check that all possible options are managed correctly!"
    esac
done

shift $((OPTIND - 1))

if [ "$forceid" = "true" ]
then
    sid=$1
    bkdir=$2
    if [ -z $sid ]
    then
        echo "must provid system id value"
        fatal 65
    fi
else
    bkdir=$1
fi

if [ -z $bkdir ]
then
    bkdir=/mnt/backup/
fi


if [ "$local" = "false" ]
then
    printMessage "Attempting to mount $bkdir""..."
    mountpoint -q $bkdir || ( mount $bkdir  && mountpoint -q $bkdir)  || emitError $? "Backup directory is not a mountpoint"
else
    printMessage "Not mounting $bkdir as requested"
fi

printMessage "Trying to determine old volume names""..."

homevol=$(btrfs subvolume list / |grep "$sid"h|rev|cut -d ' ' -f1|rev)
rootvol=$(btrfs subvolume list / |grep "$sid"r|rev|cut -d ' ' -f1|rev)

if [[ `echo $homevol | wc -l` != 1 ]]
then
    error 66 "Old home subvolume not found: send command will fail" 
fi
if [[ `echo $rootvol | wc -l` != 1 ]]
then
    error 66 "Old root subvolume not found: send command will fail" 
fi

printMessage "Checking that no backup volume with the same name already exist""..."

dateid=$(date -u +%y%m%d)
if [[ -n $(btrfs subvolume list / |grep $dateid) ]]
then
    echo "Backup volume may already exist"
    fatal 66
fi

askConfirmation || fatal 68

btrfs subvolume snapshot / /svols/"$sid"r$dateid -r || emitError 67 "Root snapshot failed: send command will fail too"
btrfs subvolume snapshot /home /svols/"$sid"h$dateid -r || emitError 67  "Home snapshot failed: send command will fail too"

commandh="btrfs send -p /svols/$homevol /svols/$sid"h"$dateid | btrfs receive $bkdir"
commandr="btrfs send -p /svols/$rootvol /svols/$sid"r"$dateid | btrfs receive $bkdir"

if [ "$local" = "false" ]
then
    printMessage "About to execute:"
    printMessage "$commandh"
    printMessage "$commandr"
fi

printMessage "Existing subvolumes: $(btrfs subvolume list /)"
askConfirmation || fatal 68

if [ "$local" = "false" ]
then
    eval $commandh || emitError 69 "Sending home failed"
    eval $commandr || emitError 69 "Sending root failed"
fi

printMessage "About to delete old subvolumes; subvolumes in /: $(btrfs subvolume list /)"
printMessage "subvolumes in /mnt/backup: $(btrfs subvolume list /mnt/backup/ | grep $dateid)"
askConfirmation ||fatal 68

btrfs subvolume delete /svols/$homevol && btrfs subvolume delete /svols/$rootvol || emitError 70 "Delete commnd failed"
exit 0
