#!/bin/bash

printUsage() {
    echo "Usage: "
    echo "" `echo $0|rev|cut -d '/' -f1|rev` " [options] id [backup directory]"
    echo "" `echo $0|rev|cut -d '/' -f1|rev` " -n [options] [backup directory]"
    echo "Backup /home and / btrfs subvolumes to backup directory"
    echo "<backup directory> must be a btrfs filesystem;
 backup will be named <backup directory>/<id>[r|h]date, so that incremental backups are possible.
<id> is a string used to distinguish backups of different system in the same directory"
    echo "Options:
-h: print this help and exit
-v: print version and exit
-n: noid, set an emty id 
-l: local, do not send subvolumes to a backup filesystem
-c: continue, do not abort after a non fatal error"
    echo "exit codes
0 success
1--64 mount failure (mount exit code)
65 invalid input
66 incorrect subvolumes
67 btrfs error
68 user cancelled action
69 error in send/receive
70 error in delete"
}

printVersion() {
    version="1.0"
    echo "btrfsBackup version $version."
    echo "This software is released into the public domain, see \"LICENSE\" for further details."
}

emitError() {
    errorFlag=true
    >&2 echo "Warning (error code $1): $2"
    if [ "$exitOnError" = "true" ]
    then exit $1
    fi
}

fatal() {
    exit $1
}

warnErrors()
{
    if [ "$errorFlag" = "true" ]
    then
        echo -e "\033[0;31mWarning: there were errors\033[0m"
    else
        echo -e "\033[0;32mNo errors since now\033[0m"
    fi
}

id=$1
bkdir=$2
forceid=true            # force nonempty id by default
local=false             # send to backup fs by default
exitOnError=true        # exit on error by default
errorFlag=false         # no errors since now

while getopts hvnle: options
do
    case $options in
	h) printUsage
	   exit 0;;
	v) printVersion
           exit 0;;
        n) forceid=false
           # empty id: first argument was backup directory
           bkdir=$id
           id="";;
        l) local=true;;
        c) exitOnError=false
    esac
done

if [ -z $id ] && [ "$forceid" = "true" ]
then
    echo "must provid system id value"
    fatal 65
fi
if [ -z $bkdir ]
then
    bkdir=/mnt/backup/
fi

if [ "$local" = "false" ]
then
    mountpoint -q $bkdir || ( mount $bkdir  && mountpoint -q $bkdir)  || emitError $? "Backup directory is not a mountpoint"
fi

homevol=$(btrfs subvolume list / |grep "$id"h|rev|cut -d ' ' -f1|rev)
rootvol=$(btrfs subvolume list / |grep "$id"r|rev|cut -d ' ' -f1|rev)

if [[ `echo $homevol | wc -l` != 1 ]]
then
    error 66 "Old home subvolume not found: send command will fail " 
fi
if [[ `echo $rootvol | wc -l` != 1 ]]
then
    error 66 "Old root subvolume not found: send command will fail " 
fi

dateid=$(date -u +%y%m%d)
if [[ -n $(btrfs subvolume list / |grep $dateid) ]]
then
    echo "backup subvolume may already exist"
    fatal 66
fi

btrfs subvolume snapshot / /svols/"$id"r$dateid -r || error 67 "Root snapshot failed: send command will fail too"
btrfs subvolume snapshot /home /svols/"$id"h$dateid -r || error 67  "Home snapshot failed: send command will fail too"

commandh="btrfs send -p /svols/$homevol /svols/$id"h"$dateid | btrfs receive /mnt/backup/"
commandr="btrfs send -p /svols/$rootvol /svols/$id"r"$dateid | btrfs receive /mnt/backup/"

if [ "$local" = "false" ]
then
    echo "About to execute:"
    echo $commandh
    echo $commandr
fi
echo "Existing subvolumes:"
btrfs subvolume list /
warnErrors
read

if [[ -n $REPLY ]]
then fatal 68
fi

if [ "$local" = "false" ]
then
    eval $commandh || error 69 "Sending home failed"
    eval $commandr || error 69 "Sending root failed" 
fi

echo "About to delete old subvolumes; subvolumes in /:"
btrfs subvolume list /
echo "subvolumes in /mnt/backup:"
btrfs subvolume list /mnt/backup/ | grep $dateid
warnErrors
read

if [[ -n $REPLY ]]
then fatal 68
fi

btrfs subvolume delete /svols/$homevol && btrfs subvolume delete /svols/$rootvol || emitError 70 "Delete commnd failed"
exit 0
